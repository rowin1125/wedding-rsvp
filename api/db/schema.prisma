datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = "native"
}

model User {
    id                  String     @id @default(cuid())
    email               String     @unique
    hashedPassword      String
    salt                String
    resetToken          String?
    resetTokenExpiresAt DateTime?
    verified            Boolean    @default(false)
    verifiedToken       String?
    wedding             Wedding?   @relation(fields: [weddingId], references: [id])
    weddingId           String?    @unique
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    roles               UserRole[]
}

model Wedding {
    id                         String                      @id @default(cuid())
    date                       DateTime
    name                       String
    gcloudStoragePath          String                      @default("")
    user                       User?
    createdAt                  DateTime                    @default(now())
    updatedAt                  DateTime                    @updatedAt
    gallery                    Gallery[]
    mediaLibrary               MediaLibrary?
    assets                     Asset[]
    bannerImage                AssetReference?             @relation("weddingReferences", fields: [bannerImageId], references: [id], onDelete: SetNull)
    bannerImageId              String?                     @unique
    partners                   Partner[]
    theme                      String?
    preferredSeason            String?
    isAbroad                   Boolean                     @default(false)
    dayParts                   WeddingDayPart[]
    guestGroups                GuestGroup[]
    weddingInvitationResponses WeddingInvitationResponse[]
    guests                     Guest[]
}

model WeddingDayPart {
    id                    String                @id @default(cuid())
    name                  String
    startTime             DateTime
    endTime               DateTime
    description           String?
    wedding               Wedding               @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId             String
    guestDayPartsPresents GuestDayPartPresent[]
    createdAt             DateTime              @default(now())
    updatedAt             DateTime              @updatedAt
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum PartnerType {
    BRIDE
    GROOM
}

model Partner {
    id        String      @id @default(cuid())
    firstName String
    lastName  String
    gender    Gender
    type      PartnerType
    wedding   Wedding     @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId String
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

enum GuestGroupType {
    FAMILY
    PARTNERS
    INDIVIDUAL
}

model GuestGroup {
    id                     String         @id @default(cuid())
    name                   String?
    guestGroupType         GuestGroupType
    guestGroupRelationType String
    guests                 Guest[]
    address                Address?
    addressId              String?        @unique
    wedding                Wedding        @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId              String
    createdAt              DateTime       @default(now())
    updatedAt              DateTime       @updatedAt
}

model Address {
    id                          String                     @id @default(cuid())
    street                      String?
    houseNumber                 String?
    zipCode                     String?
    city                        String?
    country                     String?
    livesAbroad                 Boolean                    @default(false)
    createdAt                   DateTime                   @default(now())
    updatedAt                   DateTime                   @updatedAt
    guestGroup                  GuestGroup?                @relation(fields: [guestGroupId], references: [id], onDelete: Cascade)
    guestGroupId                String?                    @unique
    guests                      Guest[]
    weddingInvitationResponse   WeddingInvitationResponse? @relation(fields: [weddingInvitationResponseId], references: [id])
    weddingInvitationResponseId String?                    @unique
}

enum GuestOrigin {
    GUEST_LIST
    RSVP
}

model Guest {
    id                    String                @id @default(cuid())
    firstName             String
    lastName              String
    isChild               Boolean               @default(false)
    phoneNumber           String?
    email                 String?
    dietary               String[]
    notes                 String?
    connectedViaRsvp      Boolean               @default(false)
    guestOrigin           GuestOrigin           @default(GUEST_LIST)
    guestGroup            GuestGroup?           @relation(fields: [guestGroupId], references: [id], onDelete: Cascade)
    guestGroupId          String?
    wedding               Wedding               @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId             String
    guestWeddingResponse  GuestWeddingResponse?
    guestDayPartsPresents GuestDayPartPresent[]
    address               Address?              @relation(fields: [addressId], references: [id])
    addressId             String?
    createdAt             DateTime              @default(now())
    updatedAt             DateTime              @updatedAt
}

model WeddingInvitationResponse {
    id                    String                 @id @default(cuid())
    guestWeddingResponses GuestWeddingResponse[]
    address               Address?
    addressId             String?                @unique
    createdAt             DateTime               @default(now())
    updatedAt             DateTime               @updatedAt
    wedding               Wedding                @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId             String
}

model GuestWeddingResponse {
    id                          String                     @id @default(cuid())
    dayPartsPresent             GuestDayPartPresent[]
    remarks                     String?
    guest                       Guest                      @relation(fields: [guestId], references: [id])
    guestId                     String                     @unique
    createdAt                   DateTime                   @default(now())
    updatedAt                   DateTime                   @updatedAt
    weddingInvitationResponse   WeddingInvitationResponse? @relation(fields: [weddingInvitationResponseId], references: [id], onDelete: Cascade)
    weddingInvitationResponseId String?
}

model GuestDayPartPresent {
    id                         String                     @id @default(cuid())
    guestWeddingResponseStatus GuestWeddingResponseStatus @default(UNKNOWN)
    guestWeddingResponse       GuestWeddingResponse?      @relation(fields: [guestWeddingResponseId], references: [id], onDelete: Cascade)
    guestWeddingResponseId     String?
    weddingDayPart             WeddingDayPart             @relation(fields: [weddingDayPartId], references: [id], onDelete: Cascade)
    weddingDayPartId           String
    guest                      Guest?                     @relation(fields: [guestId], references: [id])
    guestId                    String?
    createdAt                  DateTime                   @default(now())
    updatedAt                  DateTime                   @updatedAt
}

enum GuestWeddingResponseStatus {
    UNKNOWN
    ACCEPTED
    DECLINED
}

enum Role {
    ADMIN
    MASTER_OF_CEREMONIES
    WEDDING_OWNER
    USER
}

model UserRole {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    name      Role     @default(USER)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@unique([name, userId])
}

model Gallery {
    id                      String                   @id @default(cuid())
    name                    String
    gcloudStoragePath       String
    qrCode                  String?                  @unique @db.Text
    qrCodeId                String?
    wedding                 Wedding                  @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId               String
    assets                  Asset[]
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    galleryDownloadRequests GalleryDownloadRequest[]
    maxAllowedDownloads     Int                      @default(5)
    bannerImage             AssetReference?          @relation("galleryReferences", fields: [bannerImageId], references: [id], onDelete: SetNull)
    bannerImageId           String?                  @unique
}

model MediaLibrary {
    id                String   @id @default(cuid())
    gcloudStoragePath String
    assets            Asset[]
    wedding           Wedding  @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId         String   @unique
    maxAllowedAssets  Int      @default(75)
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

enum GalleryDownloadRequestStatus {
    PENDING
    SUCCESS
    FAILED
}

model GalleryDownloadRequest {
    id          String                       @id @default(cuid())
    gallery     Gallery                      @relation(fields: [galleryId], references: [id], onDelete: Cascade)
    galleryId   String
    status      GalleryDownloadRequestStatus
    validUntil  DateTime?
    downloadUrl String?
    createdAt   DateTime                     @default(now())
    updatedAt   DateTime                     @updatedAt
}

model Asset {
    id                String           @id @default(cuid())
    originalFilename  String?
    metadata          Json
    gcloudStoragePath String
    fileType          String
    url               String
    title             String?
    altText           String?
    description       String?
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt
    gallery           Gallery?         @relation(fields: [galleryId], references: [id], onDelete: Cascade)
    galleryId         String?
    mediaLibrary      MediaLibrary?    @relation(fields: [mediaLibraryId], references: [id])
    mediaLibraryId    String?
    wedding           Wedding          @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId         String
    assetReferences   AssetReference[]
}

// Workaround for Prisma not supporting Polymorphic Associations
// https://github.com/prisma/prisma/issues/1644
model AssetReference {
    id                String   @id @default(cuid())
    asset             Asset    @relation(fields: [assetId], references: [id])
    assetId           String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    galleryReferences Gallery? @relation("galleryReferences")
    weddingReferences Wedding? @relation("weddingReferences")
    /// [AssetReferenceMetadata]
    metadata          Json
}

model QrCode {
    id          String    @id @default(cuid())
    code        String    @db.Text
    // url to visit in the frontend where the redirect should happen
    baseUrl     String
    redirectUrl String
    isActive    Boolean   @default(true)
    usageCount  Int       @default(0)
    /// [QRCodeMetadata]
    metadata    Json
    expiresAt   DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model RW_DataMigration {
    version    String   @id
    name       String
    startedAt  DateTime
    finishedAt DateTime
}
