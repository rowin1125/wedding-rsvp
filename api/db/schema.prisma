datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    binaryTargets = "native"
}

enum InvitationType {
    DAY
    EVENING
}

model User {
    id                  String     @id @default(cuid())
    email               String     @unique
    hashedPassword      String
    salt                String
    resetToken          String?
    resetTokenExpiresAt DateTime?
    verified            Boolean    @default(false)
    verifiedToken       String?
    wedding             Wedding?   @relation(fields: [weddingId], references: [id])
    weddingId           String?    @unique
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
    roles               UserRole[]
}

model Wedding {
    id                      String              @id @default(cuid())
    date                    DateTime
    name                    String
    gcloudStoragePath       String              @default("")
    dayInvitationAmount     Int                 @default(0)
    eveningInvitationAmount Int                 @default(0)
    weddingInvitation       WeddingInvitation[]
    weddingGuests           WeddingGuest[]
    user                    User?
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt
    gallery                 Gallery[]
}

model WeddingInvitation {
    id             String         @id @default(cuid())
    weddingId      String
    presence       Boolean        @default(false)
    useCouponCode  Boolean        @default(false)
    dietaryWishes  String?
    remarks        String?
    weddingGuests  WeddingGuest[]
    invitationType InvitationType
    email          String
    wedding        Wedding        @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
}

model WeddingGuest {
    id                  String             @id @default(cuid())
    weddingId           String
    name                String?
    firstName           String?
    lastName            String?
    weddingInvitation   WeddingInvitation? @relation(fields: [weddingInvitationId], references: [id], onDelete: Cascade)
    weddingInvitationId String?
    wedding             Wedding            @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    createdAt           DateTime           @default(now())
    updatedAt           DateTime           @updatedAt
}

enum Role {
    ADMIN
    MASTER_OF_CEREMONIES
    WEDDING_OWNER
    USER
}

model UserRole {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
    name      Role     @default(USER)
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String

    @@unique([name, userId])
}

model Gallery {
    id                String    @id @default(cuid())
    name              String
    gcloudStoragePath String
    qrCode            String?   @unique @db.Text
    qrCodeId          String?
    downloadUrl       String?
    downloadRequestAt DateTime?
    downloadPending   Boolean   @default(false)
    wedding           Wedding   @relation(fields: [weddingId], references: [id], onDelete: Cascade)
    weddingId         String
    assets            Asset[]
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
}

model Asset {
    id                String   @id @default(cuid())
    gallery           Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)
    galleryId         String
    metadata          Json
    gcloudStoragePath String
    fileType          String
    url               String
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

model QrCode {
    id          String    @id @default(cuid())
    code        String    @db.Text
    // url to visit in the frontend where the redirect should happen
    baseUrl     String
    redirectUrl String
    isActive    Boolean   @default(true)
    usageCount  Int       @default(0)
    /// [QRCodeMetadata]
    metadata    Json
    expiresAt   DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model RW_DataMigration {
    version    String   @id
    name       String
    startedAt  DateTime
    finishedAt DateTime
}
